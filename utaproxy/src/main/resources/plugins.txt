# UtaProxy PluginsPlugins extend the basic functionality of UtaProxy by allowing the JavaScriptsystem to capture more events. Plugins consist of a main javascript file,a descriptor file and optionally one or more support files. Each pluginresides in its own subdirectory within the plugins directory.## Installing pluginsPlugins should usually be packaged in such a way that they can be extracteddirectly into the plugins directory. If there are no subdirectories inside thepackage, you need to create one in the plugins directory and extract the pluginthere. The end result should be a subdirectory within the plugins directory,and it should contain at least one .js file and a descriptor.xml file.You may also need to configure some plugins. See the next section for details.## Configuring pluginsPlugins may contain a config.json file that contains the plugin's configurationdata in JSON format. The file should be self-explanatory and/or well-documentedso that users can easily change the configuration.If you're unfamiliar with the JSON data format, see www.json.org for help.## Using pluginsPlugins collect data autonomously. Starting UtaProxy with plugins is done withthe -plugins command line switch, for example:java -jar utaproxy.jar -plugins monocle;highlightThe plugin names are references to the subdirectory names within the plugin directory. Multiple plugin names are separated with a semi-colon (;).Note that a UtaProxy plugin only handles writing event data into the log file.Interpreting the data is Someone Else's Problem. If the data logged by a pluginis plottable, it's possible to have a UtaProxyReportGenerator plugin handle it.## Writing pluginsA plugin can consist of javascript and css files. There are four differenttypes of files in a plugin: * The main JavaScript file - implements the plugin interface * Support JavaScript files - JS libraries etc * Style files (CSS) - CSS styles for the plugin * Plugin configuration files (descriptor.xml and config.json)### Descriptor.xml The name of the plugin, the main JS file and the support files are configuredin the descriptor.xml file. Here's an example descriptor:    <plugin name="Exemplary plugin">        <pluginFilename>usaproxy.exemplary.plugin.js</pluginFilename>    	<supportJSFiles>            <filename>exemplary.support.library.js</filename>        </supportJSFiles>        <cssFiles>            <filename>exemplary.css</filename>        </cssFiles>    </plugin>Set up your descriptor.xml to match your plugin.### Plugin interface (main JS file)The main JS file must declare a plugin object and place it under the UsaProxy.plugins object. The plugin object must implement the plugin interface.The best way to get started is to take a look at the two provided plugins,highlight and monocle. The first one provides a way for users to highlightelements on the page, which gets logged. The second one is a plugin fortracking the Monocle e-Book reader software.The plugin interface is defined as:Member				Type		Descriptionsetup				function	(Optional) Will be executed when UsaProxy is initialized. Set up your custom DOM tree modifications here.events				object		Contains the event handlersevents.bindTo		function	Returns the DOM elements to which the event handlers are bound. [Array]events.events		function	Returns the names of the events to be bound. [Array]events.onTrigger	function	Returns an object that will be written into the log file. [Object]events.deferBind	function	(Optional) A function that binds the event handlers in case they cannot be bound immediately after the document is loaded.Again, the best way to understand the interface is to take a look at the provided plugins.### Config.jsonThe configuration file is meant for UtaProxy admins. The file contains a singleJSON object that will be exposed to the plugin. Each configuration object willbe available at UsaProxy.pluginConfigurations.<pluginName>.See the highlight plugin for an example.### File loading orderThe files are loaded into the browser in the following order: 1. jQuery 2. plugins support JS files 3. plugins CSS files 4. UtaProxy pre-init 5. plugin configuration objects 6. main plugin JS file 7. UtaProxy main init 